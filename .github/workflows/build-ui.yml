name: Check, Build & Deploy UI code

on:
   workflow_dispatch:
    inputs: 
      environment: 
        description: 'Environment to deploy'
        type: environment
        required: true

   push:
    branches:
     - develop
     - stage
     - main
    paths-ignore:
      - '.github/**/*' 
      - 'sonar-project.properties'

   pull_request:
    branches:
      - develop
      - stage
      - main
    types: [opened, synchronize, reopened]

env:
  REACT_APP_CLIENT_ID: ${{ secrets.APP_CLIENT_ID }}
  REACT_APP_TENANT_ID: ${{ secrets.APP_TENANT_ID }}

jobs:
  SonarQube_Scan:
    name: SonarQube Scan
    runs-on: [self-hosted,Linux, cicdframework]
    steps:
      - name: Clean up .scannerwork folder
        run: docker run -v "$(pwd):/usr/src" sonarsource/sonar-scanner-cli rm -rf .scannerwork
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Install dependencies
        run: npm install
      
      - name: Run the tests and generate coverage report
        run: npm test

      - uses: ./.github/actions/sonarqube_scan
        name: Sonarqube-scan
        with:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  Build_UI_code_for_PR:
    name: Build_UI_code_for_PR
    if: ${{ startsWith(github.ref, 'refs/pull/') }}
    runs-on: [self-hosted,Linux, cicdframework]
    needs: SonarQube_Scan
    steps:
        - name: Checkout repository
          uses: actions/checkout@v2
          with:
            fetch-depth: 0
        - name: Set up Node.js 20.x
          uses: actions/setup-node@v4
          with:
            node-version: 20.x

        - name: Install dependencies
          run: npm install

        - name: Build
          run: npm run build 

  environment:
    name: Select Environment
    runs-on: [self-hosted,Linux, cicdframework]
    if: ${{ ! startsWith(github.ref, 'refs/pull/') }}
    needs: SonarQube_Scan
    steps:
      -   name: Select deployment environment
          id: branch_check
          run: |
              echo "Running on branch ${{ github.ref }}"
              if [ "${{ inputs.environment }}" != "" ]; then
                  echo "env_name=${{ inputs.environment }}" >> $GITHUB_OUTPUT
              elif [ "${{ github.ref }}" == "refs/heads/develop" ]; then
                  echo "env_name=develop" >> $GITHUB_OUTPUT
              elif [ "${{ github.ref }}" == "refs/heads/stage" ]; then
                  echo "env_name=Stage" >> $GITHUB_OUTPUT
              elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
                  echo "env_name=Production" >> $GITHUB_OUTPUT                    
              else
                  echo "ERROR: The environment is not defined"; exit 1;
              fi
    outputs:
        env_name: ${{ steps.branch_check.outputs.env_name }}

  Build_UI_code:
    name: Build_UI_code
    runs-on: [self-hosted,Linux, cicdframework]
    if: ${{ ! startsWith(github.ref, 'refs/pull/') }}
    needs: environment
    environment:
      name: ${{ needs.environment.outputs.env_name }}
    env:
      REACT_APP_BASE_API_URL: ${{ vars.BASE_API_URL }}
    steps:
        - name: Checkout repository
          uses: actions/checkout@v2
          with:
            fetch-depth: 0
        - name: Set up Node.js 20.x
          uses: actions/setup-node@v4
          with:
            node-version: 20.x

        - name: Install GitVersion
          uses: gittools/actions/gitversion/setup@v1.1.0
          with:
            versionSpec: '5.12.0'

        - name: Determine Version
          id: gitversion
          uses: gittools/actions/gitversion/execute@v1.1.0
          with:
            useConfigFile: true  

        - name: Install dependencies
          run: npm install

        - name: Build
          run: npm run build 

        - name: Zip release
          run: |
            cd ./build
            zip -r release.zip .
        
        - name: Upload artifact
          uses: actions/upload-artifact@v4
          with:
            name: node-app-${{ steps.gitversion.outputs.MajorMinorPatch }}
            path: ./build/release.zip
    outputs:
      version_num: ${{ steps.gitversion.outputs.MajorMinorPatch }}

  Deploy:
    name: Deploy to ${{ needs.environment.outputs.env_name }} environment
    runs-on: [self-hosted,Linux, cicdframework]
    if: ${{ ! startsWith(github.ref, 'refs/pull/') }}
    needs: [environment, Build_UI_code]
    environment: 
      name: ${{ needs.environment.outputs.env_name }}
    steps: 
        - name: download the artifact
          uses: actions/download-artifact@v4
          with:
            name: node-app-${{ needs.Build_UI_code.outputs.version_num }}

        - name: deploy the web-app
          uses: azure/webapps-deploy@v2
          with:
            app-name: ${{ vars.APP_SERVICE_NAME }}
            publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE }}
            package: release.zip
